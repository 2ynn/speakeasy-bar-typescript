/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPClient } from "./http";
import { RetryConfig } from "./retries";
import { Params, pathToFunc } from "./url";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * The production server.
     */
    "https://speakeasy.bar",
    /**
     * The staging server.
     */
    "https://staging.speakeasy.bar",
    /**
     * A per-organization and per-environment API.
     */
    "https://{organization}.{environment}.speakeasy.bar",
] as const;

/**
 * The environment name. Defaults to the production environment.
 */
export enum ServerEnvironment {
    Prod = "prod",
    Staging = "staging",
    Dev = "dev",
}

export type SDKOptions = {
    apiKey?: string | (() => Promise<string>);

    httpClient?: HTTPClient;
    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;
    /**
     * Allows setting the environment variable for url substitution
     */
    environment?: ServerEnvironment;
    /**
     * Allows setting the organization variable for url substitution
     */
    organization?: string;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: RetryConfig;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
    let serverURL = options.serverURL;

    const serverParams: Params[] = [
        {},
        {},
        {
            environment: options.environment ?? "prod",
            organization: options.organization ?? "api",
        },
    ];
    let params: Params = {};

    if (!serverURL) {
        const serverIdx = options.serverIdx ?? 0;
        if (serverIdx < 0 || serverIdx >= ServerList.length) {
            throw new Error(`Invalid server index ${serverIdx}`);
        }
        serverURL = ServerList[serverIdx] || "";
        params = serverParams[serverIdx] || {};
    }

    const u = pathToFunc(serverURL)(params);
    return new URL(u);
}

export const SDK_METADATA = {
    language: "typescript",
    openapiDocVersion: "1.0.0",
    sdkVersion: "0.9.0",
    genVersion: "2.338.7",
    userAgent: "speakeasy-sdk/typescript 0.9.0 2.338.7 1.0.0 @speakeasy-sdks/speakeasy-bar",
} as const;
