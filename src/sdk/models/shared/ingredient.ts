/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    IngredientType,
    IngredientType$inboundSchema,
    IngredientType$outboundSchema,
} from "./ingredienttype.js";
import * as z from "zod";

export type Ingredient = {
    /**
     * The name of the ingredient.
     */
    name: string;
    /**
     * The product code of the ingredient, only available when authenticated.
     */
    productCode?: string | undefined;
    /**
     * The type of ingredient.
     */
    type: IngredientType;
};

/** @internal */
export const Ingredient$inboundSchema: z.ZodType<Ingredient, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
    productCode: z.string().optional(),
    type: IngredientType$inboundSchema,
});

/** @internal */
export type Ingredient$Outbound = {
    name: string;
    productCode?: string | undefined;
    type: string;
};

/** @internal */
export const Ingredient$outboundSchema: z.ZodType<Ingredient$Outbound, z.ZodTypeDef, Ingredient> =
    z.object({
        name: z.string(),
        productCode: z.string().optional(),
        type: IngredientType$outboundSchema,
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ingredient$ {
    /** @deprecated use `Ingredient$inboundSchema` instead. */
    export const inboundSchema = Ingredient$inboundSchema;
    /** @deprecated use `Ingredient$outboundSchema` instead. */
    export const outboundSchema = Ingredient$outboundSchema;
    /** @deprecated use `Ingredient$Outbound` instead. */
    export type Outbound = Ingredient$Outbound;
}
