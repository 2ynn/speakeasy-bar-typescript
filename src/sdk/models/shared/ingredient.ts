/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IngredientType, IngredientType$ } from "./ingredienttype";
import * as z from "zod";

export type Ingredient = {
    /**
     * The name of the ingredient.
     */
    name: string;
    /**
     * A photo of the ingredient.
     */
    photo?: string | undefined;
    /**
     * The product code of an ingredient, only available when authenticated.
     */
    productCode?: string | undefined;
    /**
     * The type of ingredient.
     */
    type: IngredientType;
};

/** @internal */
export namespace Ingredient$ {
    export const inboundSchema: z.ZodType<Ingredient, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            photo: z.string().optional(),
            productCode: z.string().optional(),
            type: IngredientType$.inboundSchema,
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.productCode === undefined ? null : { productCode: v.productCode }),
                type: v.type,
            };
        });

    export type Outbound = {
        name: string;
        photo?: string | undefined;
        productCode?: string | undefined;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ingredient> = z
        .object({
            name: z.string(),
            photo: z.string().optional(),
            productCode: z.string().optional(),
            type: IngredientType$.outboundSchema,
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.productCode === undefined ? null : { productCode: v.productCode }),
                type: v.type,
            };
        });
}
