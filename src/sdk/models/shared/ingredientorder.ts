/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum IngredientOrderOrderType {
    Ingredient = "ingredient",
}

/**
 * The status of the order.
 */
export enum IngredientOrderStatus {
    Pending = "pending",
    Processing = "processing",
    Complete = "complete",
}

/**
 * An order for a drink or ingredient.
 */
export type IngredientOrder = {
    /**
     * The address to deliver the ingredient to.
     */
    deliveryAddress?: string | undefined;
    orderType: IngredientOrderOrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
    /**
     * The status of the order.
     */
    status: IngredientOrderStatus;
};

/**
 * An order for a drink or ingredient.
 */
export type IngredientOrderInput = {
    /**
     * The address to deliver the ingredient to.
     */
    deliveryAddress?: string | undefined;
    orderType: IngredientOrderOrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
};

/** @internal */
export namespace IngredientOrderOrderType$ {
    export const inboundSchema = z.nativeEnum(IngredientOrderOrderType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace IngredientOrderStatus$ {
    export const inboundSchema = z.nativeEnum(IngredientOrderStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace IngredientOrder$ {
    export const inboundSchema: z.ZodType<IngredientOrder, z.ZodTypeDef, unknown> = z
        .object({
            deliveryAddress: z.string().optional(),
            orderType: IngredientOrderOrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: IngredientOrderStatus$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.deliveryAddress === undefined
                    ? null
                    : { deliveryAddress: v.deliveryAddress }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });

    export type Outbound = {
        deliveryAddress?: string | undefined;
        orderType: string;
        productCode: string;
        quantity: number;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IngredientOrder> = z
        .object({
            deliveryAddress: z.string().optional(),
            orderType: IngredientOrderOrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: IngredientOrderStatus$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.deliveryAddress === undefined
                    ? null
                    : { deliveryAddress: v.deliveryAddress }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });
}

/** @internal */
export namespace IngredientOrderInput$ {
    export const inboundSchema: z.ZodType<IngredientOrderInput, z.ZodTypeDef, unknown> = z
        .object({
            deliveryAddress: z.string().optional(),
            orderType: IngredientOrderOrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.deliveryAddress === undefined
                    ? null
                    : { deliveryAddress: v.deliveryAddress }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        deliveryAddress?: string | undefined;
        orderType: string;
        productCode: string;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IngredientOrderInput> = z
        .object({
            deliveryAddress: z.string().optional(),
            orderType: IngredientOrderOrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.deliveryAddress === undefined
                    ? null
                    : { deliveryAddress: v.deliveryAddress }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });
}
