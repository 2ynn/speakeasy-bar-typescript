/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DrinkIngredient, DrinkIngredient$ } from "./drinkingredient";
import { DrinkType, DrinkType$ } from "./drinktype";
import * as z from "zod";

export type DrinkInput = {
    /**
     * The ingredients required to make the drink, only available when authenticated.
     */
    ingredients?: Array<DrinkIngredient> | undefined;
    /**
     * The name of the drink.
     */
    name: string;
    /**
     * A photo of the drink.
     */
    photo?: string | undefined;
    /**
     * The price of one unit of the drink in US cents.
     */
    price: number;
    /**
     * The product code of a drink, only available when authenticated.
     */
    productCode: string;
    /**
     * The type of drink.
     */
    type?: DrinkType | undefined;
};

/** @internal */
export namespace DrinkInput$ {
    export const inboundSchema: z.ZodType<DrinkInput, z.ZodTypeDef, unknown> = z
        .object({
            ingredients: z.array(DrinkIngredient$.inboundSchema).optional(),
            name: z.string(),
            photo: z.string().optional(),
            price: z.number(),
            productCode: z.string(),
            type: DrinkType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ingredients === undefined ? null : { ingredients: v.ingredients }),
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                price: v.price,
                productCode: v.productCode,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        ingredients?: Array<DrinkIngredient$.Outbound> | undefined;
        name: string;
        photo?: string | undefined;
        price: number;
        productCode: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DrinkInput> = z
        .object({
            ingredients: z.array(DrinkIngredient$.outboundSchema).optional(),
            name: z.string(),
            photo: z.string().optional(),
            price: z.number(),
            productCode: z.string(),
            type: DrinkType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ingredients === undefined ? null : { ingredients: v.ingredients }),
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                price: v.price,
                productCode: v.productCode,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
