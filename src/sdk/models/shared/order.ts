/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of order.
 */
export enum OrderOrderType {
    Drink = "drink",
    Ingredient = "ingredient",
}

/**
 * The status of the order.
 */
export enum OrderStatus {
    Pending = "pending",
    Processing = "processing",
    Complete = "complete",
}

/**
 * An order for a drink or ingredient.
 */
export type Order = {
    /**
     * The type of order.
     */
    orderType: OrderOrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
    /**
     * The status of the order.
     */
    status: OrderStatus;
};

/**
 * An order for a drink or ingredient.
 */
export type OrderInput = {
    /**
     * The type of order.
     */
    orderType: OrderOrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
};

/** @internal */
export namespace OrderOrderType$ {
    export const inboundSchema = z.nativeEnum(OrderOrderType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace OrderStatus$ {
    export const inboundSchema = z.nativeEnum(OrderStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Order$ {
    export const inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
        .object({
            orderType: OrderOrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: OrderStatus$.inboundSchema,
        })
        .transform((v) => {
            return {
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });

    export type Outbound = {
        orderType: string;
        productCode: string;
        quantity: number;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Order> = z
        .object({
            orderType: OrderOrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: OrderStatus$.outboundSchema,
        })
        .transform((v) => {
            return {
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });
}

/** @internal */
export namespace OrderInput$ {
    export const inboundSchema: z.ZodType<OrderInput, z.ZodTypeDef, unknown> = z
        .object({
            orderType: OrderOrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        orderType: string;
        productCode: string;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderInput> = z
        .object({
            orderType: OrderOrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });
}
