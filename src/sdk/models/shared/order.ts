/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrderType,
  OrderType$inboundSchema,
  OrderType$outboundSchema,
} from "./ordertype.js";

/**
 * The status of the order.
 */
export enum Status {
  Pending = "pending",
  Processing = "processing",
  Complete = "complete",
}

/**
 * An order for a drink or ingredient.
 */
export type Order = {
  /**
   * The product code of the drink or ingredient.
   */
  productCode: string;
  /**
   * The number of units of the drink or ingredient to order.
   */
  quantity: number;
  /**
   * The status of the order.
   */
  status: Status;
  /**
   * The type of order.
   */
  type: OrderType;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({
    productCode: z.string(),
    quantity: z.number().int(),
    status: Status$inboundSchema,
    type: OrderType$inboundSchema,
  });

/** @internal */
export type Order$Outbound = {
  productCode: string;
  quantity: number;
  status: string;
  type: string;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({
  productCode: z.string(),
  quantity: z.number().int(),
  status: Status$outboundSchema,
  type: OrderType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

export function orderToJSON(order: Order): string {
  return JSON.stringify(Order$outboundSchema.parse(order));
}

export function orderFromJSON(
  jsonString: string,
): SafeParseResult<Order, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order' from JSON`,
  );
}
