/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The bar counter to collect the drink from.
 */
export enum BarCounter {
    Upstairs = "upstairs",
    Outside = "outside",
    Lounge = "lounge",
}

export enum OrderType {
    Drink = "drink",
}

/**
 * The status of the order.
 */
export enum Status {
    Pending = "pending",
    Processing = "processing",
    Complete = "complete",
}

/**
 * An order for a drink or ingredient.
 */
export type DrinkOrder = {
    /**
     * The bar counter to collect the drink from.
     */
    barCounter?: BarCounter | undefined;
    orderType: OrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
    /**
     * The status of the order.
     */
    status: Status;
};

/**
 * An order for a drink or ingredient.
 */
export type DrinkOrderInput = {
    /**
     * The bar counter to collect the drink from.
     */
    barCounter?: BarCounter | undefined;
    orderType: OrderType;
    /**
     * The product code of the drink or ingredient.
     */
    productCode: string;
    /**
     * The number of units of the drink or ingredient to order.
     */
    quantity: number;
};

/** @internal */
export namespace BarCounter$ {
    export const inboundSchema = z.nativeEnum(BarCounter);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace OrderType$ {
    export const inboundSchema = z.nativeEnum(OrderType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DrinkOrder$ {
    export const inboundSchema: z.ZodType<DrinkOrder, z.ZodTypeDef, unknown> = z
        .object({
            barCounter: BarCounter$.inboundSchema.optional(),
            orderType: OrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: Status$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.barCounter === undefined ? null : { barCounter: v.barCounter }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });

    export type Outbound = {
        barCounter?: string | undefined;
        orderType: string;
        productCode: string;
        quantity: number;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DrinkOrder> = z
        .object({
            barCounter: BarCounter$.outboundSchema.optional(),
            orderType: OrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
            status: Status$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.barCounter === undefined ? null : { barCounter: v.barCounter }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
                status: v.status,
            };
        });
}

/** @internal */
export namespace DrinkOrderInput$ {
    export const inboundSchema: z.ZodType<DrinkOrderInput, z.ZodTypeDef, unknown> = z
        .object({
            barCounter: BarCounter$.inboundSchema.optional(),
            orderType: OrderType$.inboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.barCounter === undefined ? null : { barCounter: v.barCounter }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        barCounter?: string | undefined;
        orderType: string;
        productCode: string;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DrinkOrderInput> = z
        .object({
            barCounter: BarCounter$.outboundSchema.optional(),
            orderType: OrderType$.outboundSchema,
            productCode: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.barCounter === undefined ? null : { barCounter: v.barCounter }),
                orderType: v.orderType,
                productCode: v.productCode,
                quantity: v.quantity,
            };
        });
}
