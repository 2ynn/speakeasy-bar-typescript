/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export enum Webhook {
  StockUpdate = "stockUpdate",
}

export type RequestBody = {
  url?: string | undefined;
  webhook?: Webhook | undefined;
};

export type SubscribeToWebhooksResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Webhook$inboundSchema: z.ZodNativeEnum<typeof Webhook> = z
  .nativeEnum(Webhook);

/** @internal */
export const Webhook$outboundSchema: z.ZodNativeEnum<typeof Webhook> =
  Webhook$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook$ {
  /** @deprecated use `Webhook$inboundSchema` instead. */
  export const inboundSchema = Webhook$inboundSchema;
  /** @deprecated use `Webhook$outboundSchema` instead. */
  export const outboundSchema = Webhook$outboundSchema;
}

/** @internal */
export const RequestBody$inboundSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  webhook: Webhook$inboundSchema.optional(),
});

/** @internal */
export type RequestBody$Outbound = {
  url?: string | undefined;
  webhook?: string | undefined;
};

/** @internal */
export const RequestBody$outboundSchema: z.ZodType<
  RequestBody$Outbound,
  z.ZodTypeDef,
  RequestBody
> = z.object({
  url: z.string().optional(),
  webhook: Webhook$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody$ {
  /** @deprecated use `RequestBody$inboundSchema` instead. */
  export const inboundSchema = RequestBody$inboundSchema;
  /** @deprecated use `RequestBody$outboundSchema` instead. */
  export const outboundSchema = RequestBody$outboundSchema;
  /** @deprecated use `RequestBody$Outbound` instead. */
  export type Outbound = RequestBody$Outbound;
}

export function requestBodyToJSON(requestBody: RequestBody): string {
  return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}

export function requestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody' from JSON`,
  );
}

/** @internal */
export const SubscribeToWebhooksResponse$inboundSchema: z.ZodType<
  SubscribeToWebhooksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type SubscribeToWebhooksResponse$Outbound = {
  ContentType: string;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const SubscribeToWebhooksResponse$outboundSchema: z.ZodType<
  SubscribeToWebhooksResponse$Outbound,
  z.ZodTypeDef,
  SubscribeToWebhooksResponse
> = z.object({
  contentType: z.string(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribeToWebhooksResponse$ {
  /** @deprecated use `SubscribeToWebhooksResponse$inboundSchema` instead. */
  export const inboundSchema = SubscribeToWebhooksResponse$inboundSchema;
  /** @deprecated use `SubscribeToWebhooksResponse$outboundSchema` instead. */
  export const outboundSchema = SubscribeToWebhooksResponse$outboundSchema;
  /** @deprecated use `SubscribeToWebhooksResponse$Outbound` instead. */
  export type Outbound = SubscribeToWebhooksResponse$Outbound;
}

export function subscribeToWebhooksResponseToJSON(
  subscribeToWebhooksResponse: SubscribeToWebhooksResponse,
): string {
  return JSON.stringify(
    SubscribeToWebhooksResponse$outboundSchema.parse(
      subscribeToWebhooksResponse,
    ),
  );
}

export function subscribeToWebhooksResponseFromJSON(
  jsonString: string,
): SafeParseResult<SubscribeToWebhooksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscribeToWebhooksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscribeToWebhooksResponse' from JSON`,
  );
}
