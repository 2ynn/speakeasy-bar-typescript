/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export enum Webhook {
    StockUpdate = "stockUpdate",
}

export type RequestBody = {
    url?: string | undefined;
    webhook?: Webhook | undefined;
};

export type SubscribeToWebhooksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace Webhook$ {
    export const inboundSchema = z.nativeEnum(Webhook);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RequestBody$ {
    export const inboundSchema: z.ZodType<RequestBody, z.ZodTypeDef, unknown> = z
        .object({
            url: z.string().optional(),
            webhook: Webhook$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        webhook?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBody> = z
        .object({
            url: z.string().optional(),
            webhook: Webhook$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
            };
        });
}

/** @internal */
export namespace SubscribeToWebhooksResponse$ {
    export const inboundSchema: z.ZodType<SubscribeToWebhooksResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscribeToWebhooksResponse> = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
