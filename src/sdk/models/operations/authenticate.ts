/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type AuthenticateRequestBody = {
    password?: string | undefined;
    username?: string | undefined;
};

/**
 * The api key to use for authenticated endpoints.
 */
export type AuthenticateResponseBody = {
    token?: string | undefined;
};

export type AuthenticateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The api key to use for authenticated endpoints.
     */
    object?: AuthenticateResponseBody | undefined;
};

/** @internal */
export namespace AuthenticateRequestBody$ {
    export const inboundSchema: z.ZodType<AuthenticateRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            password: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });

    export type Outbound = {
        password?: string | undefined;
        username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticateRequestBody> = z
        .object({
            password: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });
}

/** @internal */
export namespace AuthenticateResponseBody$ {
    export const inboundSchema: z.ZodType<AuthenticateResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });

    export type Outbound = {
        token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticateResponseBody> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });
}

/** @internal */
export namespace AuthenticateResponse$ {
    export const inboundSchema: z.ZodType<AuthenticateResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => AuthenticateResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        object?: AuthenticateResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticateResponse> = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => AuthenticateResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
