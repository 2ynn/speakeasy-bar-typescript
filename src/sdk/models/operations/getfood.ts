/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetFoodRequest = {
  name: string;
};

/**
 * A food item.
 */
export type GetFoodResponseBody = {
  name?: string | undefined;
};

export type GetFoodResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * A food item.
   */
  object?: GetFoodResponseBody | undefined;
};

/** @internal */
export const GetFoodRequest$inboundSchema: z.ZodType<
  GetFoodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetFoodRequest$Outbound = {
  name: string;
};

/** @internal */
export const GetFoodRequest$outboundSchema: z.ZodType<
  GetFoodRequest$Outbound,
  z.ZodTypeDef,
  GetFoodRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFoodRequest$ {
  /** @deprecated use `GetFoodRequest$inboundSchema` instead. */
  export const inboundSchema = GetFoodRequest$inboundSchema;
  /** @deprecated use `GetFoodRequest$outboundSchema` instead. */
  export const outboundSchema = GetFoodRequest$outboundSchema;
  /** @deprecated use `GetFoodRequest$Outbound` instead. */
  export type Outbound = GetFoodRequest$Outbound;
}

export function getFoodRequestToJSON(getFoodRequest: GetFoodRequest): string {
  return JSON.stringify(GetFoodRequest$outboundSchema.parse(getFoodRequest));
}

export function getFoodRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFoodRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFoodRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFoodRequest' from JSON`,
  );
}

/** @internal */
export const GetFoodResponseBody$inboundSchema: z.ZodType<
  GetFoodResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type GetFoodResponseBody$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const GetFoodResponseBody$outboundSchema: z.ZodType<
  GetFoodResponseBody$Outbound,
  z.ZodTypeDef,
  GetFoodResponseBody
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFoodResponseBody$ {
  /** @deprecated use `GetFoodResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetFoodResponseBody$inboundSchema;
  /** @deprecated use `GetFoodResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetFoodResponseBody$outboundSchema;
  /** @deprecated use `GetFoodResponseBody$Outbound` instead. */
  export type Outbound = GetFoodResponseBody$Outbound;
}

export function getFoodResponseBodyToJSON(
  getFoodResponseBody: GetFoodResponseBody,
): string {
  return JSON.stringify(
    GetFoodResponseBody$outboundSchema.parse(getFoodResponseBody),
  );
}

export function getFoodResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetFoodResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFoodResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFoodResponseBody' from JSON`,
  );
}

/** @internal */
export const GetFoodResponse$inboundSchema: z.ZodType<
  GetFoodResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => GetFoodResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetFoodResponse$Outbound = {
  ContentType: string;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
  object?: GetFoodResponseBody$Outbound | undefined;
};

/** @internal */
export const GetFoodResponse$outboundSchema: z.ZodType<
  GetFoodResponse$Outbound,
  z.ZodTypeDef,
  GetFoodResponse
> = z.object({
  contentType: z.string(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => GetFoodResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFoodResponse$ {
  /** @deprecated use `GetFoodResponse$inboundSchema` instead. */
  export const inboundSchema = GetFoodResponse$inboundSchema;
  /** @deprecated use `GetFoodResponse$outboundSchema` instead. */
  export const outboundSchema = GetFoodResponse$outboundSchema;
  /** @deprecated use `GetFoodResponse$Outbound` instead. */
  export type Outbound = GetFoodResponse$Outbound;
}

export function getFoodResponseToJSON(
  getFoodResponse: GetFoodResponse,
): string {
  return JSON.stringify(GetFoodResponse$outboundSchema.parse(getFoodResponse));
}

export function getFoodResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFoodResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFoodResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFoodResponse' from JSON`,
  );
}
