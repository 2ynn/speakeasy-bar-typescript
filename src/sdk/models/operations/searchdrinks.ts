/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type SearchDrinksRequest = {
    /**
     * The search query.
     */
    query: string;
    /**
     * The type of drink to filter by. If not provided all drinks will be returned.
     */
    type?: shared.DrinkType | undefined;
};

export type SearchDrinksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of drinks.
     */
    classes?: Array<shared.Drink> | undefined;
};

/** @internal */
export namespace SearchDrinksRequest$ {
    export const inboundSchema: z.ZodType<SearchDrinksRequest, z.ZodTypeDef, unknown> = z
        .object({
            query: z.string(),
            type: shared.DrinkType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                query: v.query,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        query: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SearchDrinksRequest> = z
        .object({
            query: z.string(),
            type: shared.DrinkType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                query: v.query,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace SearchDrinksResponse$ {
    export const inboundSchema: z.ZodType<SearchDrinksResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            classes: z.array(shared.Drink$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.classes === undefined ? null : { classes: v.classes }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        classes?: Array<shared.Drink$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SearchDrinksResponse> = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            classes: z.array(shared.Drink$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.classes === undefined ? null : { classes: v.classes }),
            };
        });
}
