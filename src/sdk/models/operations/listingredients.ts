/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListIngredientsRequest = {
  /**
   * A list of ingredients to filter by. If not provided all ingredients will be returned.
   */
  ingredients?: Array<string> | undefined;
  page: number;
};

export type Data = {
  resultArray: Array<number>;
};

/**
 * A list of ingredients.
 */
export type ListIngredientsResponseBody = {
  data?: Data | undefined;
};

export type ListIngredientsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * A list of ingredients.
   */
  object?: ListIngredientsResponseBody | undefined;
};

/** @internal */
export const ListIngredientsRequest$inboundSchema: z.ZodType<
  ListIngredientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ingredients: z.array(z.string()).optional(),
  page: z.number().int(),
});

/** @internal */
export type ListIngredientsRequest$Outbound = {
  ingredients?: Array<string> | undefined;
  page: number;
};

/** @internal */
export const ListIngredientsRequest$outboundSchema: z.ZodType<
  ListIngredientsRequest$Outbound,
  z.ZodTypeDef,
  ListIngredientsRequest
> = z.object({
  ingredients: z.array(z.string()).optional(),
  page: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIngredientsRequest$ {
  /** @deprecated use `ListIngredientsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIngredientsRequest$inboundSchema;
  /** @deprecated use `ListIngredientsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIngredientsRequest$outboundSchema;
  /** @deprecated use `ListIngredientsRequest$Outbound` instead. */
  export type Outbound = ListIngredientsRequest$Outbound;
}

export function listIngredientsRequestToJSON(
  listIngredientsRequest: ListIngredientsRequest,
): string {
  return JSON.stringify(
    ListIngredientsRequest$outboundSchema.parse(listIngredientsRequest),
  );
}

export function listIngredientsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIngredientsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIngredientsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIngredientsRequest' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    resultArray: z.array(z.number().int()),
  });

/** @internal */
export type Data$Outbound = {
  resultArray: Array<number>;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    resultArray: z.array(z.number().int()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ListIngredientsResponseBody$inboundSchema: z.ZodType<
  ListIngredientsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema).optional(),
});

/** @internal */
export type ListIngredientsResponseBody$Outbound = {
  data?: Data$Outbound | undefined;
};

/** @internal */
export const ListIngredientsResponseBody$outboundSchema: z.ZodType<
  ListIngredientsResponseBody$Outbound,
  z.ZodTypeDef,
  ListIngredientsResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIngredientsResponseBody$ {
  /** @deprecated use `ListIngredientsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListIngredientsResponseBody$inboundSchema;
  /** @deprecated use `ListIngredientsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListIngredientsResponseBody$outboundSchema;
  /** @deprecated use `ListIngredientsResponseBody$Outbound` instead. */
  export type Outbound = ListIngredientsResponseBody$Outbound;
}

export function listIngredientsResponseBodyToJSON(
  listIngredientsResponseBody: ListIngredientsResponseBody,
): string {
  return JSON.stringify(
    ListIngredientsResponseBody$outboundSchema.parse(
      listIngredientsResponseBody,
    ),
  );
}

export function listIngredientsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListIngredientsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIngredientsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIngredientsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListIngredientsResponse$inboundSchema: z.ZodType<
  ListIngredientsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => ListIngredientsResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListIngredientsResponse$Outbound = {
  ContentType: string;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
  object?: ListIngredientsResponseBody$Outbound | undefined;
};

/** @internal */
export const ListIngredientsResponse$outboundSchema: z.ZodType<
  ListIngredientsResponse$Outbound,
  z.ZodTypeDef,
  ListIngredientsResponse
> = z.object({
  contentType: z.string(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => ListIngredientsResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIngredientsResponse$ {
  /** @deprecated use `ListIngredientsResponse$inboundSchema` instead. */
  export const inboundSchema = ListIngredientsResponse$inboundSchema;
  /** @deprecated use `ListIngredientsResponse$outboundSchema` instead. */
  export const outboundSchema = ListIngredientsResponse$outboundSchema;
  /** @deprecated use `ListIngredientsResponse$Outbound` instead. */
  export type Outbound = ListIngredientsResponse$Outbound;
}

export function listIngredientsResponseToJSON(
  listIngredientsResponse: ListIngredientsResponse,
): string {
  return JSON.stringify(
    ListIngredientsResponse$outboundSchema.parse(listIngredientsResponse),
  );
}

export function listIngredientsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIngredientsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIngredientsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIngredientsResponse' from JSON`,
  );
}
