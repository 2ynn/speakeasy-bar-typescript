/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetDrinkRequest = {
  name: string;
};

export type GetDrinkResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A drink.
   */
  drink?: shared.Drink | undefined;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetDrinkRequest$inboundSchema: z.ZodType<
  GetDrinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetDrinkRequest$Outbound = {
  name: string;
};

/** @internal */
export const GetDrinkRequest$outboundSchema: z.ZodType<
  GetDrinkRequest$Outbound,
  z.ZodTypeDef,
  GetDrinkRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrinkRequest$ {
  /** @deprecated use `GetDrinkRequest$inboundSchema` instead. */
  export const inboundSchema = GetDrinkRequest$inboundSchema;
  /** @deprecated use `GetDrinkRequest$outboundSchema` instead. */
  export const outboundSchema = GetDrinkRequest$outboundSchema;
  /** @deprecated use `GetDrinkRequest$Outbound` instead. */
  export type Outbound = GetDrinkRequest$Outbound;
}

export function getDrinkRequestToJSON(
  getDrinkRequest: GetDrinkRequest,
): string {
  return JSON.stringify(GetDrinkRequest$outboundSchema.parse(getDrinkRequest));
}

export function getDrinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDrinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrinkRequest' from JSON`,
  );
}

/** @internal */
export const GetDrinkResponse$inboundSchema: z.ZodType<
  GetDrinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Drink: shared.Drink$inboundSchema.optional(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Drink": "drink",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetDrinkResponse$Outbound = {
  ContentType: string;
  Drink?: shared.Drink$Outbound | undefined;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetDrinkResponse$outboundSchema: z.ZodType<
  GetDrinkResponse$Outbound,
  z.ZodTypeDef,
  GetDrinkResponse
> = z.object({
  contentType: z.string(),
  drink: shared.Drink$outboundSchema.optional(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    drink: "Drink",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrinkResponse$ {
  /** @deprecated use `GetDrinkResponse$inboundSchema` instead. */
  export const inboundSchema = GetDrinkResponse$inboundSchema;
  /** @deprecated use `GetDrinkResponse$outboundSchema` instead. */
  export const outboundSchema = GetDrinkResponse$outboundSchema;
  /** @deprecated use `GetDrinkResponse$Outbound` instead. */
  export type Outbound = GetDrinkResponse$Outbound;
}

export function getDrinkResponseToJSON(
  getDrinkResponse: GetDrinkResponse,
): string {
  return JSON.stringify(
    GetDrinkResponse$outboundSchema.parse(getDrinkResponse),
  );
}

export function getDrinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDrinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrinkResponse' from JSON`,
  );
}
