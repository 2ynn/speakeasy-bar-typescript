/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import * as shared from "../shared";
import * as z from "zod";

export type CreateOrderRequestBody =
    | (shared.DrinkOrderInput & { orderType: shared.OrderType.Drink })
    | (shared.IngredientOrderInput & { orderType: shared.IngredientOrderOrderType.Ingredient });

export type CreateOrderRequest = {
    requestBody:
        | (shared.DrinkOrderInput & { orderType: shared.OrderType.Drink })
        | (shared.IngredientOrderInput & { orderType: shared.IngredientOrderOrderType.Ingredient });
    /**
     * The url to call when the order is updated.
     */
    callbackUrl?: string | undefined;
};

/**
 * The order was created successfully.
 */
export type CreateOrderResponseBody =
    | (shared.DrinkOrder & { orderType: shared.OrderType.Drink })
    | (shared.IngredientOrder & { orderType: shared.IngredientOrderOrderType.Ingredient });

export type CreateOrderResponse = {
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The order was created successfully.
     */
    oneOf?:
        | (shared.DrinkOrder & { orderType: shared.OrderType.Drink })
        | (shared.IngredientOrder & { orderType: shared.IngredientOrderOrderType.Ingredient })
        | undefined;
};

/** @internal */
export namespace CreateOrderRequestBody$ {
    export const inboundSchema: z.ZodType<CreateOrderRequestBody, z.ZodTypeDef, unknown> = z.union([
        shared.DrinkOrderInput$.inboundSchema.and(
            z
                .object({ orderType: z.literal(shared.OrderType.Drink) })
                .transform((v) => ({ orderType: v.orderType }))
        ),
        shared.IngredientOrderInput$.inboundSchema.and(
            z
                .object({ orderType: z.literal(shared.IngredientOrderOrderType.Ingredient) })
                .transform((v) => ({ orderType: v.orderType }))
        ),
    ]);

    export type Outbound =
        | (shared.DrinkOrderInput$.Outbound & { orderType: shared.OrderType.Drink })
        | (shared.IngredientOrderInput$.Outbound & {
              orderType: shared.IngredientOrderOrderType.Ingredient;
          });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderRequestBody> =
        z.union([
            shared.DrinkOrderInput$.outboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.OrderType.Drink) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
            shared.IngredientOrderInput$.outboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.IngredientOrderOrderType.Ingredient) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
        ]);
}

/** @internal */
export namespace CreateOrderRequest$ {
    export const inboundSchema: z.ZodType<CreateOrderRequest, z.ZodTypeDef, unknown> = z
        .object({
            RequestBody: z.union([
                shared.DrinkOrderInput$.inboundSchema.and(
                    z
                        .object({ orderType: z.literal(shared.OrderType.Drink) })
                        .transform((v) => ({ orderType: v.orderType }))
                ),
                shared.IngredientOrderInput$.inboundSchema.and(
                    z
                        .object({
                            orderType: z.literal(shared.IngredientOrderOrderType.Ingredient),
                        })
                        .transform((v) => ({ orderType: v.orderType }))
                ),
            ]),
            callback_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                ...(v.callback_url === undefined ? null : { callbackUrl: v.callback_url }),
            };
        });

    export type Outbound = {
        RequestBody:
            | (shared.DrinkOrderInput$.Outbound & { orderType: shared.OrderType.Drink })
            | (shared.IngredientOrderInput$.Outbound & {
                  orderType: shared.IngredientOrderOrderType.Ingredient;
              });
        callback_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderRequest> = z
        .object({
            requestBody: z.union([
                shared.DrinkOrderInput$.outboundSchema.and(
                    z
                        .object({ orderType: z.literal(shared.OrderType.Drink) })
                        .transform((v) => ({ orderType: v.orderType }))
                ),
                shared.IngredientOrderInput$.outboundSchema.and(
                    z
                        .object({
                            orderType: z.literal(shared.IngredientOrderOrderType.Ingredient),
                        })
                        .transform((v) => ({ orderType: v.orderType }))
                ),
            ]),
            callbackUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                ...(v.callbackUrl === undefined ? null : { callback_url: v.callbackUrl }),
            };
        });
}

/** @internal */
export namespace CreateOrderResponseBody$ {
    export const inboundSchema: z.ZodType<CreateOrderResponseBody, z.ZodTypeDef, unknown> = z.union(
        [
            shared.DrinkOrder$.inboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.OrderType.Drink) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
            shared.IngredientOrder$.inboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.IngredientOrderOrderType.Ingredient) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
        ]
    );

    export type Outbound =
        | (shared.DrinkOrder$.Outbound & { orderType: shared.OrderType.Drink })
        | (shared.IngredientOrder$.Outbound & {
              orderType: shared.IngredientOrderOrderType.Ingredient;
          });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderResponseBody> =
        z.union([
            shared.DrinkOrder$.outboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.OrderType.Drink) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
            shared.IngredientOrder$.outboundSchema.and(
                z
                    .object({ orderType: z.literal(shared.IngredientOrderOrderType.Ingredient) })
                    .transform((v) => ({ orderType: v.orderType }))
            ),
        ]);
}

/** @internal */
export namespace CreateOrderResponse$ {
    export const inboundSchema: z.ZodType<CreateOrderResponse, z.ZodTypeDef, unknown> = z
        .object({
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            oneOf: z
                .union([
                    shared.DrinkOrder$.inboundSchema.and(
                        z
                            .object({ orderType: z.literal(shared.OrderType.Drink) })
                            .transform((v) => ({ orderType: v.orderType }))
                    ),
                    shared.IngredientOrder$.inboundSchema.and(
                        z
                            .object({
                                orderType: z.literal(shared.IngredientOrderOrderType.Ingredient),
                            })
                            .transform((v) => ({ orderType: v.orderType }))
                    ),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        Body?: Uint8Array | undefined;
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        oneOf?:
            | (shared.DrinkOrder$.Outbound & { orderType: shared.OrderType.Drink })
            | (shared.IngredientOrder$.Outbound & {
                  orderType: shared.IngredientOrderOrderType.Ingredient;
              })
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderResponse> = z
        .object({
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            oneOf: z
                .union([
                    shared.DrinkOrder$.outboundSchema.and(
                        z
                            .object({ orderType: z.literal(shared.OrderType.Drink) })
                            .transform((v) => ({ orderType: v.orderType }))
                    ),
                    shared.IngredientOrder$.outboundSchema.and(
                        z
                            .object({
                                orderType: z.literal(shared.IngredientOrderOrderType.Ingredient),
                            })
                            .transform((v) => ({ orderType: v.orderType }))
                    ),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
