/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import { blobLikeSchema } from "../../types";
import * as shared from "../shared";
import * as z from "zod";

export type Photo = {
    content: Uint8Array | string;
    fileName: string;
};

export type UpdateDrinkMultipartRequestBody = {
    /**
     * The name of the drink.
     */
    name?: string | undefined;
    /**
     * A photo of the drink.
     */
    photo?: Photo | Blob | undefined;
    /**
     * The price of one unit of the drink in US cents.
     */
    price?: number | undefined;
    /**
     * The type of drink.
     */
    type?: shared.DrinkType | undefined;
};

export type UpdateDrinkMultipartRequest = {
    requestBody: UpdateDrinkMultipartRequestBody;
    productCode: string;
};

export type UpdateDrinkMultipartResponse = {
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The drink was updated successfully.
     */
    drink?: shared.Drink | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace Photo$ {
    export const inboundSchema: z.ZodType<Photo, z.ZodTypeDef, unknown> = z
        .object({
            content: b64$.zodInbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Photo> = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace UpdateDrinkMultipartRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateDrinkMultipartRequestBody, z.ZodTypeDef, unknown> =
        z
            .object({
                name: z.string().optional(),
                photo: z.lazy(() => Photo$.inboundSchema).optional(),
                price: z.number().optional(),
                type: shared.DrinkType$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.photo === undefined ? null : { photo: v.photo }),
                    ...(v.price === undefined ? null : { price: v.price }),
                    ...(v.type === undefined ? null : { type: v.type }),
                };
            });

    export type Outbound = {
        name?: string | undefined;
        photo?: Photo$.Outbound | Blob | undefined;
        price?: number | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateDrinkMultipartRequestBody
    > = z
        .object({
            name: z.string().optional(),
            photo: z
                .lazy(() => Photo$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
            price: z.number().optional(),
            type: shared.DrinkType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace UpdateDrinkMultipartRequest$ {
    export const inboundSchema: z.ZodType<UpdateDrinkMultipartRequest, z.ZodTypeDef, unknown> = z
        .object({
            RequestBody: z.lazy(() => UpdateDrinkMultipartRequestBody$.inboundSchema),
            productCode: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                productCode: v.productCode,
            };
        });

    export type Outbound = {
        RequestBody: UpdateDrinkMultipartRequestBody$.Outbound;
        productCode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateDrinkMultipartRequest> = z
        .object({
            requestBody: z.lazy(() => UpdateDrinkMultipartRequestBody$.outboundSchema),
            productCode: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                productCode: v.productCode,
            };
        });
}

/** @internal */
export namespace UpdateDrinkMultipartResponse$ {
    export const inboundSchema: z.ZodType<UpdateDrinkMultipartResponse, z.ZodTypeDef, unknown> = z
        .object({
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            Drink: shared.Drink$.inboundSchema.optional(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                ...(v.Drink === undefined ? null : { drink: v.Drink }),
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        Body?: Uint8Array | undefined;
        ContentType: string;
        Drink?: shared.Drink$.Outbound | undefined;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateDrinkMultipartResponse> = z
        .object({
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            drink: shared.Drink$.outboundSchema.optional(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                ...(v.drink === undefined ? null : { Drink: v.drink }),
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
