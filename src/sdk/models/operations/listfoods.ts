/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * A list of food items.
 */
export type ListFoodsResponseBody = {
  name?: string | undefined;
};

export type ListFoodsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * A list of food items.
   */
  object?: ListFoodsResponseBody | undefined;
};

/** @internal */
export const ListFoodsResponseBody$inboundSchema: z.ZodType<
  ListFoodsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type ListFoodsResponseBody$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const ListFoodsResponseBody$outboundSchema: z.ZodType<
  ListFoodsResponseBody$Outbound,
  z.ZodTypeDef,
  ListFoodsResponseBody
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFoodsResponseBody$ {
  /** @deprecated use `ListFoodsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListFoodsResponseBody$inboundSchema;
  /** @deprecated use `ListFoodsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListFoodsResponseBody$outboundSchema;
  /** @deprecated use `ListFoodsResponseBody$Outbound` instead. */
  export type Outbound = ListFoodsResponseBody$Outbound;
}

export function listFoodsResponseBodyToJSON(
  listFoodsResponseBody: ListFoodsResponseBody,
): string {
  return JSON.stringify(
    ListFoodsResponseBody$outboundSchema.parse(listFoodsResponseBody),
  );
}

export function listFoodsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListFoodsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFoodsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFoodsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListFoodsResponse$inboundSchema: z.ZodType<
  ListFoodsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => ListFoodsResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListFoodsResponse$Outbound = {
  ContentType: string;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
  object?: ListFoodsResponseBody$Outbound | undefined;
};

/** @internal */
export const ListFoodsResponse$outboundSchema: z.ZodType<
  ListFoodsResponse$Outbound,
  z.ZodTypeDef,
  ListFoodsResponse
> = z.object({
  contentType: z.string(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => ListFoodsResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFoodsResponse$ {
  /** @deprecated use `ListFoodsResponse$inboundSchema` instead. */
  export const inboundSchema = ListFoodsResponse$inboundSchema;
  /** @deprecated use `ListFoodsResponse$outboundSchema` instead. */
  export const outboundSchema = ListFoodsResponse$outboundSchema;
  /** @deprecated use `ListFoodsResponse$Outbound` instead. */
  export type Outbound = ListFoodsResponse$Outbound;
}

export function listFoodsResponseToJSON(
  listFoodsResponse: ListFoodsResponse,
): string {
  return JSON.stringify(
    ListFoodsResponse$outboundSchema.parse(listFoodsResponse),
  );
}

export function listFoodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListFoodsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFoodsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFoodsResponse' from JSON`,
  );
}
