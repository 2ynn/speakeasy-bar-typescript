/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type ListDrinksRequest = {
    /**
     * The type of drink to filter by. If not provided all drinks will be returned.
     */
    type?: shared.DrinkType | undefined;
};

export type ResponseBody =
    | (shared.PublicDrink & { dataLevel: shared.PublicDrinkDataLevel.Unauthenticated })
    | (shared.Drink & { dataLevel: shared.DataLevel.Authenticated });

export type ListDrinksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: shared.ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of drinks.
     */
    unions?:
        | Array<
              | (shared.PublicDrink & { dataLevel: shared.PublicDrinkDataLevel.Unauthenticated })
              | (shared.Drink & { dataLevel: shared.DataLevel.Authenticated })
          >
        | undefined;
};

/** @internal */
export namespace ListDrinksRequest$ {
    export const inboundSchema: z.ZodType<ListDrinksRequest, z.ZodTypeDef, unknown> = z
        .object({
            type: shared.DrinkType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksRequest> = z
        .object({
            type: shared.DrinkType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace ResponseBody$ {
    export const inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.union([
        shared.PublicDrink$.inboundSchema.and(
            z
                .object({ dataLevel: z.literal(shared.PublicDrinkDataLevel.Unauthenticated) })
                .transform((v) => ({ dataLevel: v.dataLevel }))
        ),
        shared.Drink$.inboundSchema.and(
            z
                .object({ dataLevel: z.literal(shared.DataLevel.Authenticated) })
                .transform((v) => ({ dataLevel: v.dataLevel }))
        ),
    ]);

    export type Outbound =
        | (shared.PublicDrink$.Outbound & {
              dataLevel: shared.PublicDrinkDataLevel.Unauthenticated;
          })
        | (shared.Drink$.Outbound & { dataLevel: shared.DataLevel.Authenticated });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody> = z.union([
        shared.PublicDrink$.outboundSchema.and(
            z
                .object({ dataLevel: z.literal(shared.PublicDrinkDataLevel.Unauthenticated) })
                .transform((v) => ({ dataLevel: v.dataLevel }))
        ),
        shared.Drink$.outboundSchema.and(
            z
                .object({ dataLevel: z.literal(shared.DataLevel.Authenticated) })
                .transform((v) => ({ dataLevel: v.dataLevel }))
        ),
    ]);
}

/** @internal */
export namespace ListDrinksResponse$ {
    export const inboundSchema: z.ZodType<ListDrinksResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            Error: shared.ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            unions: z
                .array(
                    z.union([
                        shared.PublicDrink$.inboundSchema.and(
                            z
                                .object({
                                    dataLevel: z.literal(
                                        shared.PublicDrinkDataLevel.Unauthenticated
                                    ),
                                })
                                .transform((v) => ({ dataLevel: v.dataLevel }))
                        ),
                        shared.Drink$.inboundSchema.and(
                            z
                                .object({ dataLevel: z.literal(shared.DataLevel.Authenticated) })
                                .transform((v) => ({ dataLevel: v.dataLevel }))
                        ),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.unions === undefined ? null : { unions: v.unions }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        unions?:
            | Array<
                  | (shared.PublicDrink$.Outbound & {
                        dataLevel: shared.PublicDrinkDataLevel.Unauthenticated;
                    })
                  | (shared.Drink$.Outbound & { dataLevel: shared.DataLevel.Authenticated })
              >
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksResponse> = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            unions: z
                .array(
                    z.union([
                        shared.PublicDrink$.outboundSchema.and(
                            z
                                .object({
                                    dataLevel: z.literal(
                                        shared.PublicDrinkDataLevel.Unauthenticated
                                    ),
                                })
                                .transform((v) => ({ dataLevel: v.dataLevel }))
                        ),
                        shared.Drink$.outboundSchema.and(
                            z
                                .object({ dataLevel: z.literal(shared.DataLevel.Authenticated) })
                                .transform((v) => ({ dataLevel: v.dataLevel }))
                        ),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.unions === undefined ? null : { unions: v.unions }),
            };
        });
}
