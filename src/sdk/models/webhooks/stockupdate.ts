/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type StockUpdateRequestBody = {
  drink?: shared.DrinkInput | undefined;
  ingredient?: shared.Ingredient | undefined;
};

export type StockUpdateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * An unknown error occurred interacting with the API.
   */
  error?: shared.ErrorT | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const StockUpdateRequestBody$inboundSchema: z.ZodType<
  StockUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  drink: shared.DrinkInput$inboundSchema.optional(),
  ingredient: shared.Ingredient$inboundSchema.optional(),
});

/** @internal */
export type StockUpdateRequestBody$Outbound = {
  drink?: shared.DrinkInput$Outbound | undefined;
  ingredient?: shared.Ingredient$Outbound | undefined;
};

/** @internal */
export const StockUpdateRequestBody$outboundSchema: z.ZodType<
  StockUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  StockUpdateRequestBody
> = z.object({
  drink: shared.DrinkInput$outboundSchema.optional(),
  ingredient: shared.Ingredient$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StockUpdateRequestBody$ {
  /** @deprecated use `StockUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = StockUpdateRequestBody$inboundSchema;
  /** @deprecated use `StockUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = StockUpdateRequestBody$outboundSchema;
  /** @deprecated use `StockUpdateRequestBody$Outbound` instead. */
  export type Outbound = StockUpdateRequestBody$Outbound;
}

export function stockUpdateRequestBodyToJSON(
  stockUpdateRequestBody: StockUpdateRequestBody,
): string {
  return JSON.stringify(
    StockUpdateRequestBody$outboundSchema.parse(stockUpdateRequestBody),
  );
}

export function stockUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StockUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StockUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StockUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const StockUpdateResponse$inboundSchema: z.ZodType<
  StockUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Error: shared.ErrorT$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Error": "error",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StockUpdateResponse$Outbound = {
  ContentType: string;
  Error?: shared.ErrorT$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const StockUpdateResponse$outboundSchema: z.ZodType<
  StockUpdateResponse$Outbound,
  z.ZodTypeDef,
  StockUpdateResponse
> = z.object({
  contentType: z.string(),
  error: shared.ErrorT$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    error: "Error",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StockUpdateResponse$ {
  /** @deprecated use `StockUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = StockUpdateResponse$inboundSchema;
  /** @deprecated use `StockUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = StockUpdateResponse$outboundSchema;
  /** @deprecated use `StockUpdateResponse$Outbound` instead. */
  export type Outbound = StockUpdateResponse$Outbound;
}

export function stockUpdateResponseToJSON(
  stockUpdateResponse: StockUpdateResponse,
): string {
  return JSON.stringify(
    StockUpdateResponse$outboundSchema.parse(stockUpdateResponse),
  );
}

export function stockUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<StockUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StockUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StockUpdateResponse' from JSON`,
  );
}
