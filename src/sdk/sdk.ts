/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Authentication } from "./authentication";
import { Configuration } from "./configuration";
import { Drinks } from "./drinks";
import { Orders } from "./orders";

export class BarSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _authentication?: Authentication;
    get authentication(): Authentication {
        return (this._authentication ??= new Authentication(this.options$));
    }

    private _drinks?: Drinks;
    get drinks(): Drinks {
        return (this._drinks ??= new Drinks(this.options$));
    }

    private _orders?: Orders;
    get orders(): Orders {
        return (this._orders ??= new Orders(this.options$));
    }

    private _configuration?: Configuration;
    get configuration(): Configuration {
        return (this._configuration ??= new Configuration(this.options$));
    }
}
